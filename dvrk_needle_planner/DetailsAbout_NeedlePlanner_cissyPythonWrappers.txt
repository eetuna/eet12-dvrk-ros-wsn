"""
library to compute gripper poses to perform needle driving
# main fnc is: def compute_needle_drive_gripper_affines(...)
# need to specify tissue properties (w/rt camera frame)
# Also specify grasp transform (or accept the default) and choose which arm (or accept default=PSM1)
# provide tissue entrance pt, exit pt and surface normal (w/rt camera frame)
# Get back a vector of affines of corresponding gripper affines, wrt camera frame
# (really, inputs/outputs w/rt whatever frame is of interest, but presumably camera frame)


# NEEDLE-DRIVE ASSUMPTIONS:  
# this code assumes needle driving will be in a circular arc about the needle center
# The needle center is defined as the center of the circle that contains the needle semi-circle
#  This is defined as the origin of the needle frame. The z-axis of the needle frame, bvec_needle,
# is defined perpendicular to the needle plane, with positive direction corresponding to
# needle driving with the tip leading (a requirement) corresponds to positive rotation about
# the needle z axis.
# at present, this code assumes rotation of the needle during driving is about 
# an axis parallel to the tissue surface, i.e. needle z-axis is perpendicular to tissue normal
#  (this is not required, but common)

# NEEDLE GRASP ASSUMPTIONS:
# this code does not care which arm is used; all gripper affines are computed to achieve
# a needle-drive path; not arm IK is performed here

# one can choose where on the circumference of the needle to grab it--but pragmatically,
# one will grab the needle as close to the needle tail as possible (i.e., as far from the 
# needle point as possible), so as to minimize requirements for re-grasping during needle driving
# The choice of where along the circumference to grab the needle is phi_grab_
# Define this as: phi_grab_=0 means to grab the needle in the center of its arc;
# phi_grab_ = +pi/2 means to grab the needle at its tail (should make this pi/2- half_gripper_width
#   to get a full grasp).  phi_grab_ = -pi/2 would mean to grab the gripper tip (not useful for
#  needle driving).

# a common grasp strategy is to hold the needle such that its plane is perpendicular to
# the gripper z-axis, i.e. the needle bvec_needle = +/- bvec_gripper; this is not required in general,
# but it is the default grasp pose for this code

# One must choose the contact points on the gripper where the needle will be held.  The
# default assumption for this code is that the needle will be grabbed half-way between the
# gripper tips and the gripper-jaw joint.  This is changeable via a "set" call.

# With the constraint that the needle plane is perpendicular to the gripper bvec_gripper, there
# are still 4 variations: bvec_needle = +/- bvec_gripper, and needle origin along positive or
# negative gripper y-axis (tvec_gripper).  These may by: 1) selecting direction of bvec_needle
#  (e.g., parallel or antiparallel to bvec_gripper), and 2) choosing "needle_plus_y" or "needle_ninus_y".
# For bvec_needle parallel or antiparallel to bvec_gripper, "needle_plus_y" means that the needle 
# origin will lie on the positive tvec_gripper axis; "needle_minus_y" means that the needle lies on
# the negative tvec_gripper axis.
# More generally, the needle z-axis, bvec_needle, does not have to be parallel or antiparallel to
# the gripper bvec_gripper.  In this case, the needle origin will not lie on the gripper tvec_gripper
# axis.  However, the needle origin would lie in either the positive-y half space of the gripper frame
# or the negative-y half-space of the gripper frame, and the designation "needle_plus_y" would
# still be meaningful.  However, this does not cover the special case where the plane of the needle
# contains bvec_gripper.  In this case, the needle origin will lie at y/gripper = 0.  If this case
# This case is not covered here.


# a common grasp is to have the needle surface-tangent parallel or antiparallel to the gripper x axis at 
#  the grasp location ,i.e. the needle extends out perpendicular to the jaws, i.e.
#  needle tangent  is perpendicular to gripper bvec
# it is also common to have the needle z-axis parallel to or antiparallel to the gripper z axis:
# bvec_needle || bvec_gripper, or bvec_needle || -bvec_gripper
#  That is, the needle origin lies along the (plus or minus) gripper y axis.
# Define the needle-frame x-axis as pointing from needle center (origin) towards needle tip
# Approximately, if grab the needle as far as possible from the needle tip, 
# and this grasp has needle bvec_needle || +/- bvec_gripper, then the needle tip 
# tip would also lie along the
 """
"""
Important Note on using PyKDL
PyKDL.Rotation
__init__(x, y, z)
Constructor specifying rows of rotation matrix with 3 Vectors

This is WRONG.
Constructor specifites COLUMNS of rotation matrix NOT ROWS. 

cisst InverseKinematics() and LoadRobot functions returns Errno
Errno[0] = ESUCCESS
Errno[1] = EFAILURE

enum Errno{ ESUCCESS, EFAILURE };

so if IK and LoadRobot functions return 0 it IS a SUCCESS
else if they return 1 it IS NOT a SUCCESS and a FAILURE
"""

"""@package docstring
Documentation for this test file

More details:


This file tests the cisst python wrappers for cisstVector and cisstRobot classes.


First in order to use cisstRobot adn cisstVector python wrappers, you need to expoert PYTHONPATH to .bashrc
export PYTHONPATH=$PYTHONPATH:~/catkin_ws/src/cisst-saw/cisst/cisstRobot/
export PYTHONPATH=$PYTHONPATH:~/catkin_ws/build_release/cisst/lib/

It generates an instance of vctFrm3, assigns its rotation and translation counterparts
It loads the dvrk psm kinematics, which is defined as a .rob file. It gets the file path and pas sthi string.
Creates an instance of a robManipulator
Defines the transformation from dvrk 6th frame to gripper frame
Tests the FK for a predefined set of joint values: T_6/0 = FK(qvec)
Do not append the gripper jaw joint. Only include the first 6 joint as the FK and IK of cisstRobot class based on 6 joints
To get the end effector, first find the pose of the 6th frame w.r.t base from FK. Then multiply this pose with the transformation of T_6/0 * T_7/6 = T_7/0
From the computed pose T_7/0 get the T_6/0 by T_6/0 = T_7/0*inv(T_6/7)
The compute the joint angles by IK(T_6/0) = qvec_IK
Compare qvec_IK with the original qvec and find the error: qerr = qvec - qvec_IK
Set the precision of np.array and np.matrix by np.set_printoptions. Suppress the scientific, i.e. e+00, notation
Calculate the BodyJacobian and pass the computed value to a matrix Jmat. A 6x6 matrix should be passed to function

If you are using numpy for matrices and arrays, use matrices for 2D operations.
For matrix multiplication np.array do element wise multiplication, NOT desired.
"""

